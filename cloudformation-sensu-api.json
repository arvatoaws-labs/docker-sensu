{
  "Description": "AWS CloudFormation Template for ECS Sensu",
  "Outputs": {
    "ContainerName": {
      "Description": "Container Name",
      "Value": {
        "Ref": "ContainerName"
      }
    },
    "ContainerServiceArn": {
      "Description": "Container Service ARN",
      "Value": {
        "Ref": "ContainerService"
      }
    },
    "ContainerTaskdefinitionArn": {
      "Description": "Container TaskDefinition ARN",
      "Value": {
        "Ref": "ContainerTaskdefinition"
      }
    },
    "SensuDnsExtRecord": {
      "Description": "Sensu API DNS external record",
      "Value": {
        "Ref": "SensuDnsExtRecord"
      }
    }
  },
  "Parameters": {
    "ApplicationEnv": {
      "Default": "SSM_BASE_PATH/ECS/application_env",
      "Description": "Container Host",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "BuildImageTag": {
      "Default": "SSM_BASE_PATH/ECS/build_image_tag",
      "Description": "Dev Build Image Commit Tag",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAdjustmentNumberHighDown": {
      "Default": "SSM_BASE_PATH/ECS/container_adjustment_number_high_down",
      "Description": "The amount by which to scale.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAdjustmentNumberHighUp": {
      "Default": "SSM_BASE_PATH/ECS/container_adjustment_number_high_up",
      "Description": "The amount by which to scale.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAdjustmentNumberLowDown": {
      "Default": "SSM_BASE_PATH/ECS/container_adjustment_number_low_down",
      "Description": "The amount by which to scale.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAdjustmentNumberLowUp": {
      "Default": "SSM_BASE_PATH/ECS/container_adjustment_number_low_up",
      "Description": "The amount by which to scale.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAlarmEvaluationPeriod": {
      "Default": "SSM_BASE_PATH/ECS/container_alarm_evaluation_period",
      "Description": "The number of periods over which data is compared to the specified threshold.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAlarmPeriod": {
      "Default": "SSM_BASE_PATH/ECS/container_alarm_period",
      "Description": "The time over which the specified statistic is applied.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAlarmTresholdDown": {
      "Default": "SSM_BASE_PATH/ECS/container_alarm_treshold_down",
      "Description": "The value against which the specified statistic is compared.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAlarmTresholdUp": {
      "Default": "SSM_BASE_PATH/ECS/container_alarm_treshold_up",
      "Description": "The value against which the specified statistic is compared.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerAutoscalingRole": {
      "Default": "SSM_BASE_PATH/ECS/container_autoscaling_role",
      "Description": "Container autoscaling role (ARN)",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerCooldown": {
      "Default": "SSM_BASE_PATH/ECS/container_cooldown",
      "Description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerCpu": {
      "Default": "SSM_BASE_PATH/ECS/container_cpu",
      "Description": "ECS Service CPU usage",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerDesiredCount": {
      "Default": "SSM_BASE_PATH/ECS/container_desired_count",
      "Description": "The scalable dimension thatÂ´s associated with the scalable target.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerHost": {
      "Default": "SSM_BASE_PATH/ECS/container_host",
      "Description": "Container Host",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerImage": {
      "Description": "ECS image repository",
      "Type": "String"
    },
    "ContainerMaxCapacity": {
      "Default": "SSM_BASE_PATH/ECS/container_max_capacity",
      "Description": "The maximum value that Application Auto Scaling can use to scale a target during a scaling activity.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerMemory": {
      "Default": "SSM_BASE_PATH/ECS/container_memory",
      "Description": "ECS Service Memory usage",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerMemoryReservation": {
      "Default": "SSM_BASE_PATH/ECS/container_memory_reservation",
      "Description": "ECS Service Memory reservation usage",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerMetricIntervalLowerBoundDown": {
      "Default": "SSM_BASE_PATH/ECS/container_metric_interval_lower_bound_down",
      "Description": "The lower bound of the breach size",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerMetricIntervalLowerBoundUp": {
      "Default": "SSM_BASE_PATH/ECS/container_metric_interval_lower_bound_up",
      "Description": "The lower bound of the breach size",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerMetricIntervalUpperBoundDown": {
      "Default": "SSM_BASE_PATH/ECS/container_metric_interval_upper_bound_down",
      "Description": "The upper bound of the breach size",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerMetricIntervalUpperBoundUp": {
      "Default": "SSM_BASE_PATH/ECS/container_metric_interval_upper_bound_up",
      "Description": "The upper bound of the breach size",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerMinCapacity": {
      "Default": "SSM_BASE_PATH/ECS/container_min_capacity",
      "Description": "The minimum value that Application Auto Scaling can use to scale a target during a scaling activity.",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ContainerName": {
      "Description": "Name of the ECS Container Service",
      "Type": "String"
    },
    "CustomerName": {
      "Description": "Customer name",
      "Type": "String"
    },
    "EcsFrontendElbPublicIp": {
      "Default": "SSM_BASE_PATH/ECS/ecs_frontend_elb_public_ip",
      "Description": "Elasticloadbalancer public DNS",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ElbFrontOrBack": {
      "Default": "SSM_BASE_PATH/ECS/elb_front_or_back",
      "Description": "Elastic loadbalancer (Frontend or Backend)",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ElbHealthCheckIntervalSeconds": {
      "Default": "SSM_BASE_PATH/ECS/elb_health_check_interval_seconds",
      "Description": "Elastic loadbalancer Health Check interval in seconds",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ElbHealthCheckTimeoutSeconds": {
      "Default": "SSM_BASE_PATH/ECS/elb_health_check_timeout_seconds",
      "Description": "Elastic loadbalancer Health Checks timeout in seconds",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ElbHealthyThresholdCount": {
      "Default": "SSM_BASE_PATH/ECS/elb_healthy_threshold_count",
      "Description": "Elastic loadbalancer healthy threshold count",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ElbUnhealthyThresholdCount": {
      "Default": "SSM_BASE_PATH/ECS/elb_unhealthy_threshold_count",
      "Description": "Elastic loadbalancer unhealthy threshold count",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ExternalZoneId": {
      "Default": "SSM_BASE_PATH/ECS/external_zone_id",
      "Description": "External Zone ID",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "ExternalZoneName": {
      "Default": "SSM_BASE_PATH/ECS/external_zone_name",
      "Description": "External Zone Name",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "LoadbalancerServiceRoleArn": {
      "Default": "SSM_BASE_PATH/ECS/loadbalancer_service_role_arn",
      "Description": "Elasticloadbalancer service role (ARN)",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "RedisDbTableId": {
      "Default": "SSM_BASE_PATH/ECS/redis_db_table_id",
      "Description": "Redis database (customer table id)",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "RedisHost": {
      "Default": "SSM_BASE_PATH/ECS/redis_host",
      "Description": "Redis Host",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "RedisPort": {
      "Default": "SSM_BASE_PATH/ECS/redis_port",
      "Description": "Port for Redis",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "SensuApiElbPortListener": {
      "Default": "SSM_BASE_PATH/ECS/sensu_api_elb_port_listener",
      "Description": "Sensu Api ELB port listener, (If different from Container)",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "SensuApiHost": {
      "Default": "SSM_BASE_PATH/ECS/sensu_api_host",
      "Description": "Sensu API Host",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "SensuApiInputTopic": {
      "Default": "SSM_BASE_PATH/ECS/sensu_api_input_topic",
      "Description": "SNS Topic ARN",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "SensuApiPort": {
      "Default": "SSM_BASE_PATH/ECS/sensu_api_port",
      "Description": "Sensu API port",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "SensuApiSqsQueue": {
      "Default": "SSM_BASE_PATH/ECS/sensu_api_sqs_queue",
      "Description": "SQS Queue URL",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "SensuSqsMaxNumberOfMessages": {
      "Default": "SSM_BASE_PATH/ECS/sensu_sqs_max_number_of_messages",
      "Description": "Maximum number of message for SNSSQS",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "SensuSqsWaitTimeSeconds": {
      "Default": "SSM_BASE_PATH/ECS/sensu_sqs_wait_time_seconds",
      "Description": "Waiting time in second",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "TaskRoleArn": {
      "Default": "ecs_sensu_task_role",
      "Description": "Task Role ARN",
      "Type": "AWS::SSM::Parameter::Value<String>"
    },
    "VpcId": {
      "Default": "SSM_BASE_PATH/ECS/vpc_id",
      "Description": "VPC ID",
      "Type": "AWS::SSM::Parameter::Value<String>"
    }
  },
  "Resources": {
    "ContainerAlarmScaleDown": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ContainerScalingPolicyDown"
          }
        ],
        "AlarmDescription": {
          "Fn::Join": [
            "",
            [
              "CPU Utilization low on ",
              {
                "Ref": "ContainerName"
              },
              " container"
            ]
          ]
        },
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "ServiceName",
            "Value": {
              "Ref": "ContainerName"
            }
          },
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "ContainerHost"
            }
          }
        ],
        "EvaluationPeriods": {
          "Ref": "ContainerAlarmEvaluationPeriod"
        },
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/ECS",
        "Period": {
          "Ref": "ContainerAlarmPeriod"
        },
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ContainerAlarmTresholdDown"
        }
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "ContainerAlarmScaleUp": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ContainerScalingPolicyUp"
          }
        ],
        "AlarmDescription": {
          "Fn::Join": [
            "",
            [
              "CPU Utilization high on ",
              {
                "Ref": "ContainerName"
              },
              " container"
            ]
          ]
        },
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "ServiceName",
            "Value": {
              "Ref": "ContainerName"
            }
          },
          {
            "Name": "ClusterName",
            "Value": {
              "Ref": "ContainerHost"
            }
          }
        ],
        "EvaluationPeriods": {
          "Ref": "ContainerAlarmEvaluationPeriod"
        },
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/ECS",
        "Period": {
          "Ref": "ContainerAlarmPeriod"
        },
        "Statistic": "Average",
        "Threshold": {
          "Ref": "ContainerAlarmTresholdUp"
        }
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "ContainerAutoScalingTarget": {
      "DependsOn": [
        "ContainerService"
      ],
      "Properties": {
        "MaxCapacity": {
          "Ref": "ContainerMaxCapacity"
        },
        "MinCapacity": {
          "Ref": "ContainerMinCapacity"
        },
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "service/",
              {
                "Ref": "ContainerHost"
              },
              "/",
              {
                "Ref": "ContainerName"
              }
            ]
          ]
        },
        "RoleARN": {
          "Ref": "ContainerAutoscalingRole"
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs"
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget"
    },
    "ContainerScalingPolicyDown": {
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ContainerName"
              },
              "-service-autoscaling-down"
            ]
          ]
        },
        "PolicyType": "StepScaling",
        "ScalableDimension": "ecs:service:DesiredCount",
        "ScalingTargetId": {
          "Ref": "ContainerAutoScalingTarget"
        },
        "ServiceNamespace": "ecs",
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "PercentChangeInCapacity",
          "Cooldown": {
            "Ref": "ContainerCooldown"
          },
          "MetricAggregationType": "Average",
          "StepAdjustments": [
            {
              "MetricIntervalUpperBound": {
                "Ref": "ContainerMetricIntervalUpperBoundDown"
              },
              "MetricIntervalLowerBound": {
                "Ref": "ContainerMetricIntervalLowerBoundDown"
              },
              "ScalingAdjustment": {
                "Ref": "ContainerAdjustmentNumberLowDown"
              }
            },
            {
              "MetricIntervalUpperBound": {
                "Ref": "ContainerMetricIntervalLowerBoundDown"
              },
              "ScalingAdjustment": {
                "Ref": "ContainerAdjustmentNumberHighDown"
              }
            }
          ]
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "ContainerScalingPolicyUp": {
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ContainerName"
              },
              "-service-autoscaling-up"
            ]
          ]
        },
        "PolicyType": "StepScaling",
        "ScalableDimension": "ecs:service:DesiredCount",
        "ScalingTargetId": {
          "Ref": "ContainerAutoScalingTarget"
        },
        "ServiceNamespace": "ecs",
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "PercentChangeInCapacity",
          "Cooldown": {
            "Ref": "ContainerCooldown"
          },
          "MetricAggregationType": "Average",
          "StepAdjustments": [
            {
              "MetricIntervalUpperBound": {
                "Ref": "ContainerMetricIntervalUpperBoundUp"
              },
              "MetricIntervalLowerBound": {
                "Ref": "ContainerMetricIntervalLowerBoundUp"
              },
              "ScalingAdjustment": {
                "Ref": "ContainerAdjustmentNumberLowUp"
              }
            },
            {
              "MetricIntervalLowerBound": {
                "Ref": "ContainerMetricIntervalUpperBoundUp"
              },
              "ScalingAdjustment": {
                "Ref": "ContainerAdjustmentNumberHighUp"
              }
            }
          ]
        }
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy"
    },
    "ContainerService": {
      "DependsOn": [
        "ContainerTargetGroupHttp",
        "ElbListener"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "ContainerHost"
        },
        "DesiredCount": {
          "Ref": "ContainerDesiredCount"
        },
        "LoadBalancers": [
          {
            "TargetGroupArn": {
              "Ref": "ContainerTargetGroupHttp"
            },
            "ContainerName": {
              "Ref": "ContainerName"
            },
            "ContainerPort": "4567"
          }
        ],
        "PlacementStrategies": [
          {
            "Field": "attribute:ecs.availability-zone",
            "Type": "spread"
          },
          {
            "Field": "instanceId",
            "Type": "spread"
          }
        ],
        "Role": {
          "Ref": "LoadbalancerServiceRoleArn"
        },
        "ServiceName": {
          "Ref": "ContainerName"
        },
        "TaskDefinition": {
          "Ref": "ContainerTaskdefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "ContainerTargetGroupHttp": {
      "Properties": {
        "HealthCheckIntervalSeconds": {
          "Ref": "ElbHealthCheckIntervalSeconds"
        },
        "HealthCheckPath": "/health",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": {
          "Ref": "ElbHealthCheckTimeoutSeconds"
        },
        "HealthyThresholdCount": {
          "Ref": "ElbHealthyThresholdCount"
        },
        "Matcher": {
          "HttpCode": "204"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ContainerName"
              },
              "-4567"
            ]
          ]
        },
        "Port": "4567",
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": {
          "Ref": "ElbUnhealthyThresholdCount"
        },
        "VpcId": {
          "Ref": "VpcId"
        }
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
    },
    "ContainerTaskdefinition": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": {
              "Ref": "ContainerName"
            },
            "Image": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "ContainerImage"
                  },
                  ":",
                  {
                    "Ref": "BuildImageTag"
                  }
                ]
              ]
            },
            "Cpu": {
              "Ref": "ContainerCpu"
            },
            "Memory": {
              "Ref": "ContainerMemory"
            },
            "MemoryReservation": {
              "Ref": "ContainerMemoryReservation"
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-group": "ECS-Docker",
                "awslogs-stream-prefix": {
                  "Ref": "ContainerHost"
                }
              }
            },
            "Command": [
              "api"
            ],
            "Environment": [
              {
                "Name": "API_HOST",
                "Value": "localhost"
              },
              {
                "Name": "API_PORT",
                "Value": "4567"
              },
              {
                "Name": "TRANSPORT_NAME",
                "Value": "snssqs"
              },
              {
                "Name": "SNSSQS_MAX_NUMBER_OF_MESSAGES",
                "Value": {
                  "Ref": "SensuSqsMaxNumberOfMessages"
                }
              },
              {
                "Name": "SNSSQS_WAIT_TIME_SECONDS",
                "Value": {
                  "Ref": "SensuSqsWaitTimeSeconds"
                }
              },
              {
                "Name": "SNSSQS_REGION",
                "Value": {
                  "Ref": "AWS::Region"
                }
              },
              {
                "Name": "SNSSQS_CONSUMING_SQS_QUEUE_URL",
                "Value": {
                  "Ref": "SensuApiSqsQueue"
                }
              },
              {
                "Name": "SNSSQS_PUBLISHING_SNS_TOPIC_ARN",
                "Value": {
                  "Ref": "SensuApiInputTopic"
                }
              },
              {
                "Name": "REDIS_HOST",
                "Value": {
                  "Ref": "RedisHost"
                }
              },
              {
                "Name": "REDIS_PORT",
                "Value": {
                  "Ref": "RedisPort"
                }
              },
              {
                "Name": "REDIS_DB",
                "Value": {
                  "Ref": "RedisDbTableId"
                }
              }
            ],
            "PortMappings": [
              {
                "ContainerPort": "4567"
              }
            ]
          }
        ],
        "Family": {
          "Ref": "ContainerName"
        },
        "TaskRoleArn": {
          "Ref": "TaskRoleArn"
        }
      },
      "Type": "AWS::ECS::TaskDefinition"
    },
    "ElbListener": {
      "DependsOn": [
        "ContainerTargetGroupHttp"
      ],
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ContainerTargetGroupHttp"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ElbFrontOrBack"
        },
        "Port": {
          "Ref": "SensuApiElbPortListener"
        },
        "Protocol": "HTTP"
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener"
    },
    "SensuDnsExtRecord": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Ref": "EcsFrontendElbPublicIp"
          },
          "EvaluateTargetHealth": false,
          "HostedZoneId": "Z215JYRZR1TBD5"
        },
        "HostedZoneId": {
          "Ref": "ExternalZoneId"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "sensu-api-",
              {
                "Ref": "CustomerName"
              },
              ".",
              {
                "Ref": "ExternalZoneName"
              }
            ]
          ]
        },
        "Type": "A"
      },
      "Type": "AWS::Route53::RecordSet"
    }
  }
}